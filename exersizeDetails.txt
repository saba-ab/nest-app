expense-manager აპლიკაციაში დავამატოთ middleware რომელიც ყველა რექუესთზე
 დალოგავ user-agent_ს.
შექმნის და განახლების როუტერბს დავამატოთ ვალიდაცია validation-pipe_ის 
გამოყენებით.
დავამატოთ გლობალური გარდი რომელიც რაღაც ლოგიკით ან გაატარებს რექუესთს ან
 დაბლოკავს.
 (ლოგიკა თქვენით მოიფიქრეთ)
update, delete, create როუტებს დავამატოთ გარდი რომელიც req.headers_ში
 შეამოწმებს თუ 
არსებოს ფროფერთი is-admin და აქვს მნიშვნელობა true, წინააღმდეგ 
შემთხვევაში არ გაატაროს რექუესთი.
get როუტს დავუმატოთ გარდი რომელიც შეამოწმებს req.headers_ში
 თუ არსებოს ფროფერთი api-key და აქვს
 წინაწარ განსაზღვრული მნიშვნელობა, წინააღმდეგ შემთხვევაში
  არ გაატაროს რექუესთი.

  expense-manager აპლიკაციაში გავაკეთოთ mongodb_ის ინტეგრაცია, შევქმნათ expense_ის მოდელი. 
ხარჯის დამატება, განახლება, წაშლა, ყველა ხარჯის წამოღება, ხარჯის წამოღება id_ით.
მოიკვლიეთ და დააყენეთ მონგო ლოკალურად თქვენს კომპიუტერებში. 
https://www.mongodb.com/docs/v6.0/installation/
expense-manager აპლიკაციაში გავაკეთოთ seeder 
რომელისც პროექტის გაშვებისას შეამოწმებს ჩანაწერების რაოდენობას და არ არსებობის შემთხვევაში ჩაამატებს დიდი რაოდენობით expense ობიექტებს პირობითად 10K, 20K ....
დავადოთ ინდექსი cost ფილდს და დავაოპტიმიზიროთ ძებნა.
expenses სიის წამოღებას გავუკეთოთ პაგინაცია.
დავამატოთ expenses/count როუტი, რომელიც დაგვიბრუნებს ჩანაწერების რაოდენობს cost ფილტრის მიხედვით.